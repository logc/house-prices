#lang racket/base

(provide (all-defined-out))

(struct table (rows cols shape))
(define (vecvec->table vecvec)
  (define num-rows (vector-length vecvec))
  (define num-cols (vector-length (vector-ref vecvec 0)))
  (define rows (for/hash ([i (in-naturals)] [vec vecvec])
                 (values i vec)))
  (define cols (for/hash ([j (in-range num-cols)])
                 (values j (for/vector ([i (in-range num-rows)])
                             (vector-ref (vector-ref vecvec i) j)))))
  (table rows cols (vector num-rows num-cols)))
(define (table->vecvec a-table)
  (for/vector ([i (in-range (table-num-rows a-table))])
    (hash-ref (table-rows a-table) i)))
(define (table-num-rows a-table)
  (vector-ref (table-shape a-table) 0))
(define (table-num-cols a-table)
  (vector-ref (table-shape a-table) 1))
(define (get-column a-table col-index)
  (hash-ref (table-cols a-table) col-index))
(define (get-row a-table row-index)
  (hash-ref (table-rows a-table) row-index))
(define (get-rows a-table)
  (for/vector ([idx (in-range (table-num-rows a-table))])
    (get-row a-table idx)))
(define (get-features a-table)
  (for/list ([i (in-range (table-num-cols a-table))]
             #:unless (= i (sub1 (table-num-cols a-table))))
    (hash-ref (table-cols a-table) i)))
(define (get-labels a-table)
  ;; assumes that last column always holds labels
  (hash-ref (table-cols a-table) (sub1 (table-num-cols a-table))))

(module+ test
  (require rackunit)
  (test-case "Table"
    (define vecvec (vector (vector 1 2) (vector 3 4) (vector 5 6)))
    (define a-table (vecvec->table vecvec))
    (check-eq? (table-num-rows a-table) 3)
    (check-eq? (table-num-cols a-table) 2)
    (check-equal? (get-column a-table 0) (vector 1 3 5))
    (check-equal? (get-column a-table 1) (vector 2 4 6))
    (check-equal? (get-row a-table 0) (vector 1 2))
    (check-equal? (get-features a-table) (list (vector 1 3 5)))
    (check-equal? (get-labels a-table) (vector 2 4 6))
    (check-equal? (table->vecvec a-table) vecvec)))
